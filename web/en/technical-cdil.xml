<?xml version="1.0" encoding="windows-1250" ?>
<?xml-stylesheet type="text/xsl" href="../style.xsl" ?>
<content lang="en" id="technical">
    <h1>CodeDOM Intermediate Language</h1>
    <p>
        SoodaStubGen tool uses CodeDOM to generate stub code in various languages.
        Maintaining such an amount of CodeDOM code became a nightmare, so I've developed
        a helper language called CDIL (CodeDOM Intermediate Language) and a set of tools
        that accompany it.
    </p>
    <h5>What is supported?</h5>
    <ul>
        <li><b>CDILParser</b> - which turns a textual representation of CDIL into a CodeDOM tree</li>
        <li><b>CDILTokenizer</b> - used by the parser, produces a stream of CDIL tokens</li>
        <li><b>CDILPrettyPrinter</b> - which turns a CodeDOM tree into a CDIL text</li>
        <li><b>CDILContext</b> - used to pass replaceable parameters to the parser</li>
    </ul>
    <h5>The CDIL language</h5>
    <p>
        The easiest way to define a CDIL language is to show the correspondence between various CodeDOM constructs
        and CDIL constructs:
    </p>
    <div class="smalltable">
        <table width="100%" border="1">
            <tr>
                <th width="50%">CodeDOM</th>
                <th width="50%">CDIL</th>
            </tr>

            <tr class="subheader">
                <td colspan="2">Literals</td>
            </tr>

            <tr>
                <td>new CodePrimitiveExpression(123)</td>
                <td>123</td>
            </tr>
            <tr>
                <td>new CodePrimitiveExpression("aaaasdas'aa")</td>
                <td>'aaaasdas\'aa'</td>
                </tr>
            <tr>
                <td>new CodePrimitiveExpression(true)</td>
                <td>true</td>
            </tr>
            <tr>
                <td>new CodePrimitiveExpression(false)</td>
                <td>false</td>
            </tr>
            <tr>
                <td>new CodePrimitiveExpression(null)</td>
                <td>null</td>
            </tr>
            
            <tr class="subheader">
                <td colspan="2">Class declaration</td>
            </tr>
            <tr>
                <td>
                    ctd = new CodeTypeDeclaration();<br/>
                    ctd.Name = "Name";<br/>
                    ctd.BaseTypes.Add("BaseClass");<br/>
                    ctd.BaseTypes.Add("Interface1");<br/>
                    ctd.BaseTypes.Add("Interface2");<br/>
                    ctd.Members.Add(...);<br/>
                </td>
                <td>class Name <br/>&#160;&#160;&#160;&#160;extends BaseClass <br/>&#160;&#160;&#160;&#160;implements Interface1 <br/>&#160;&#160;&#160;&#160;implements Interface2<br/>&#160;&#160;&#160;&#160;...<br/>end</td>
            </tr>
            
            <tr class="subheader">
                <td colspan="2">Method declaration</td>
            </tr>
            <tr>
                <td>
                    CodeMemberMethod method = new CodeMemberMethod();<br/>
                    method.Name = "MethodName";<br/>
                    method.Parameters.Add(new CodeParameterDeclarationExpression("SoodaObject", "oldValue"));<br/>
                    method.Parameters.Add(new CodeParameterDeclarationExpression("SoodaObject", "newValue"));<br/>
                    method.ReturnType = new CodeTypeReference("IPrimaryKeyGenerator");<br/>
                    method.Attributes = MemberAttributes.Public | MemberAttributes.Final;<br/>

                </td>
                <td>
                    <b>method</b> MethodName(SoodaObject oldValue, SoodaObject newValue)<br/>
                    &#160;&#160;&#160;&#160;<b>attributes</b> Public,Final<br/>
                    &#160;&#160;&#160;&#160;<b>returns</b> IPrimaryKeyGenerator<br/>
                    <b>begin</b><br/>
                    &#160;&#160;&#160;&#160;...<br/>
                    <b>end</b><br/>
                    </td>
            </tr>
            <tr class="subheader">
                <td colspan="2">Expressions</td>
            </tr>
            <tr>
                <td>die = new CodeMethodInvokeExpression();<br/>die.TargetObject = new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "del");<br/>die.Parameters.Add(...);</td>
                <td>this.method(...)</td>
            </tr>
            <tr>
                <td>new CodeThisReferenceExpression()</td>
                <td><b>this</b></td>
            </tr>
            <tr>
                <td>new CodeBaseReferenceExpression()</td>
                <td><b>base</b></td>
            </tr>
            <tr>
                <td>new CodePropertySetValueReferenceExpression()</td>
                <td><b>setvalue</b></td>
            </tr>
            <tr>
                <td>new CodeArgumentReferenceExpression("aaa")</td>
                <td><b>arg</b>(aaa)</td>
            </tr>
            <tr>
                <td>die = new CodeDelegateInvokeExpression();<br/>die.TargetObject = new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "del");<br/>die.Parameters.Add(...);</td>
                <td><b>delegatecall</b>(this.del)(...)</td>
            </tr>
            <tr>
                <td>new CodeTypeReferenceExpression("typename")</td>
                <td><b>typeref</b>(typename)</td>
            </tr>
            <tr>
                <td>new CodeTypeOfExpression("typename")</td>
                <td><b>typeof</b>(typename)</td>
            </tr>
            <tr>
                <td>boe = new CodeBinaryOperatorExpression();<br/>boe.Operator = CodeBinaryOperatorType.Add;<br/>boe.Left = a;<br/>boe.Right = b;</td>
                <td><b>add</b>(a,b)</td>
            </tr>
            <tr>
                <td>boe = new CodeBinaryOperatorExpression();<br/>boe.Operator = CodeBinaryOperatorType.ValueEquality;<br/>boe.Left = a;<br/>boe.Right = b;</td>
                <td><b>equal</b>(a,b)</td>
            </tr>
            <tr>
                <td>boe = new CodeBinaryOperatorExpression();<br/>boe.Operator = CodeBinaryOperatorType.IdentityEquality;<br/>boe.Left = a;<br/>boe.Right = new CodePrimitiveExpression(null);</td>
                <td><b>refequal</b>(a,null)</td>
            </tr>
            <tr>
                <td>boe = new CodeBinaryOperatorExpression();<br/>boe.Operator = CodeBinaryOperatorType.IdentityInequality;<br/>boe.Left = a;<br/>boe.Right = new CodePrimitiveExpression(null);</td>
                <td><b>refnotequal</b>(a,null)</td>
            </tr>
            <tr>
                <td>new CodeArrayIndexerExpression(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "arr"),new CodePrimitiveExpression(3))</td>
                <td><b>arrayitem</b>(this.arr,3)</td>
            </tr>
            <tr>
                <td>new CodeVariableReferenceExpression("v")</td>
                <td>var(v)</td>
            </tr>
            <tr>
                <td>
                    <b>null</b> used to define the default scope
                </td>
                <td><b>defaultscope</b></td>
            </tr>
            <tr>
                <td>new CodeDirectionExpression(FieldDirection.Ref, a)</td>
                <td><b>ref</b>(a)</td>
            </tr>
            <tr>
                <td>new CodeDirectionExpression(FieldDirection.Out, a)</td>
                <td><b>out</b>(a)</td>
            </tr>
            <tr>
                <td>new CodeCastExpression(t, e)</td>
                <td><b>cast</b>(t, e)</td>
            </tr>
            <tr>
                <td>new CodeObjectCreateExpression(t, p1, p2, p3)</td>
                <td><b>new</b> t(p1, p2, p3)</td>
            </tr>
            <tr>
                <td>new CodeArrayCreateExpression(t, s)</td>
                <td><b>newarray</b>(t,s)</td>
            </tr>
        </table>
    </div>
</content>

