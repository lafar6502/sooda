<?xml version="1.0" encoding="windows-1250" ?>
<?xml-stylesheet type="text/xsl" href="style.xsl" ?>
<content lang="en" id="documentation" subid="howitworks">

    <h1>How Sooda works?</h1>
    <p>
        Sooda is an O/R mapper which is based on code generation. You provide 
        it with a simple XML file which describes the mapping between .NET classes
        and database tables and Sooda generates the appropriate classes for you.
        The generated classes implement the required persistence functionality and expose
        a strongly-typed API which you can use to create, load, save, delete and query 
        your objects.
    </p>

    <h5>Code generation process described</h5>
    <p>
        The following picture describes the compilation process which employs Sooda
        to generate the Data Access Layer code. The tool used is called 
        <link href="soodastubgen">SoodaStubGen</link> and it creates a set of source files
        and embedded resources which need to be compiled together to produce the DAL assembly.
    </p>
    <p>To be more specific, you need the following files as inputs to the generation process:</p>
    <ol>
        <li><link href="schema">Database Schema</link> description in an XML file</li>
        <li><link href="soodaproject">Sooda Project File</link> in another XML file which specifies code generation options</li>
    </ol>
    <p>
        The outputs are:
    </p>
    <ol>
        <li>Stub code in <code>_Stubs.cs</code> file (this is regenerated every time you run SoodaStubGen)</li>
        <li>Binary, serialized database schema in <code>_DBschema.bin</code> which needs to be embedded as a resource in the resulting assembly (this is regenerated every time you run SoodaStubGen)</li>
        <li>Skeleton source code for all classes defined in the database schema (generated only once if the files are not already present)</li>
    </ol>
    <p>
        In addition SoodaStubGen is able to update the specified Visual Studio .NET project files by adding files
        that are needed for compilation and embedded resources.
    </p>
    <img src="stub_compilation.png" />

    <h5>Class Inheritance Structure</h5>
    <p>
        As mentioned above, SoodaStubGen generates two pieces of source code for each class defined
        in the Database Schema. One is called the "Stub" and the other one is called "Skeleton". The skeleton
        includes nothing but a bunch of constructor overloads which are required by Sooda and must
        inherit from the appropriate stub class. 
        You can add your own methods, properties and fields to the skeleton classes, because they are
        never regenerated.
        Assuming that business classes live in the <code>N</code> namespaces, the stub classes are located 
        in <code>N.Stubs</code> namespace and have <code>_Stub</code> suffixes (class <code>MyNamespace.MyClass</code> 
        inherits from a stub class called <code>MyNamespace.Stubs.MyClass_Stub</code>.
    </p>
    <p>
        The stubs and skeletons must be compiled together because they have a cyclic dependency
        (stub classes must be able to return references to skeleton object instances which in turn must inherit
        from the stub classes). There's an exception to this rule (you can precompile stub classes to a DLL), 
        but this only works on Microsoft.NET and relies on an a specific behaviour of C# compiler which is 
        not present in Mono's C# compiler, so this technique is not recommended. If you're still curious, ask
        a question on the <link href="mailinglists">mailing list</link>.
    </p>
    <p>
        Let's assume we have two classes: <code>Person</code> and <code>Group</code> with the one-to-many relationship
        and mutual dependencies (group includes many persons and has one manager which also a person). The following picture shows the dependency between stub and skeleton classes:
    </p>
    <img src="stubs_skeletons.png" />
    <h5>Typed Queries</h5>
    <p>
        Sooda supports a C#-based strongly query language which lets search for and filter objects based on
        their properties.
    </p>
    <p>
        For each business class, Sooda generates a set of wrapper classes that use operator overloading and support
        most common relational operations which let you query for data in a type-safe manner. The wrapper classes have 
        names derived from business class names with the <code>Field</code> suffix.
    </p>
    <p>
        The following operations are available:
    </p>
    <ul>
        <li>Alternative (<b>||</b>)</li>
        <li>Conjunction (<b>&amp;&amp;</b>)</li>
        <li>Negation (<b>!</b>)</li>
        <li>Equality comparison (<b>==</b>)</li>
        <li>Inequality comparison (<b>!=</b>)</li>
    </ul>
    <p>
        The following operations are available for all data types except Guid:
    </p>
    <ul>
        <li>Greater than operator (<b>&gt;</b>)</li>
        <li>Greater than or equal operator (<b>&gt;=</b>)</li>
        <li>Less than operator (<b>&lt;</b>)</li>
        <li>Less than or equal operator (<b>&lt;=</b>)</li>
    </ul>
    <p>
        The following operations are available for numeric data types:
    </p>
    <ul>
        <li>Addition (<b>+</b>)</li>
        <li>Subtraction (<b>-</b>)</li>
        <li>Multiplication (<b>*</b>)</li>
        <li>Division (<b>/</b>)</li>
        <li>Modulus (<b>%</b>)</li>
    </ul>
    <p>
        The following operations are available for nullable fields:
    </p>
    <ul>
        <li>Is null (<b>field.IsNull()</b>)</li>
        <li>Is not null (<b>field.IsNotNull()</b>)</li>
    </ul>
    <p>
        The following operations are available for the String data type:
    </p>
    <ul>
        <li>Like (<b>field.Like("aaa")</b>)</li>
        <li>Concatenation (<b>+</b>)</li>
    </ul>
    <p>
        There are other classes generated by SoodaStubGen, but they are are meant
        to support the Sooda infrastructure and should not be used by user programs.
    </p>
</content>

