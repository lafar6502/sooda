<?xml version="1.0" encoding="windows-1250" ?>
<?xml-stylesheet type="text/xsl" href="style.xsl" ?>
<content lang="en" id="documentation">
    <h1>Documentation</h1>
    <table-of-contents />
    <section id="intro">
        <title>Introduction to Sooda</title>
        <section id="whatissooda">
            <title>What is Sooda?</title>
            <body>
                <p>
                    <b>Sooda</b> (Simple Object-Oriented Data Access) is an Object-To-Relational Mapping 
                    software for the <a href="http://msdn.microsoft.com/net">.NET</a> environment.
                    It is a code generator, which can to generate entire Data Access Layer for your application.
                </p>
                <p>
                    Each class that's generated as part of the DAL typically corresponds to a database table,
                    its properties map to database columns and relationships map to object references and collections.
                </p>
                <p>
                    Sooda supports:
                </p>
                <ul>
                    <li>mapping one or more tables to a class</li>
                    <li>one-to-many and many-to-many relationships mapped as strongly typed collections</li>
                    <li>inheritance (two models: table-per-hierarchy (TPH) and table-per-subclass (TPS))</li>
                    <li>strongly-typed, database-based enumerations</li>
                    <li>lazy loading</li>
                    <li>differential serialization and deserialization of uncommitted changes (enables long-running transactions)</li>
                    <li>strongly typed query language (based on C# operator overloading)</li>
                    <li>text-based query language - SOQL</li>
                    <li>vertical partitioning of data (load-on-demand for large columns)</li>
                </ul>
                <p>
                    The following development tools/build environments are supported:
                </p>
                <ul>
                    <li>Visual Studio 2005 (.NET Framework 2.0)</li>
                    <li>Visual Studio 2003 (.NET Framework 1.1)</li>
                    <li>NAnt 0.85</li>
                </ul>
                <p>
                    .NET Framework 1.0 is NOT supported.
                </p>
                <p>
                    The following RDBMSes are supported:
                </p>
                <ul>
                    <li>Microsoft SQL Server 2000, 2005 (including MSDE and SQL Server Express Edition)</li>
                    <li>MySQL v4.x</li>
                    <li>PostgreSQL v8.x</li>
                    <li>Oracle 8i, 9i, 10g</li>
                </ul>
            </body>
        </section>
        <section id="gettingstarted">
            <title>Getting Started</title>
            <body>
                <p>
                    In order to use Sooda in your project you need to have a working database. We'll be using Microsoft
                    SQL Server and the Northwind database. We'll also need to provide Sooda with the following information:
                </p>
                <ol>
                    <li><b>Mapping schema</b> that describes the mapping between tables/columns in your database and 
                        classes/properties. It is stored in an XML file, usually named <code>SoodaSchema.xml</code>.</li>
                    <li><b>Code generation parameters</b> which specify various aspects of code generation. 
                        The settings are stored in an XML file with <b>.soodaproject</b> extension.</li>
                    <li><b>Runtime configuration parameters</b> such as database connection string, connection type and SQL dialect - typically stored in your <code>Application.exe.config</code></li>
                </ol>
                <p>
                    In addition, you need to make a small modification to your database (namely add a table that
                    will manage primary keys). The following sections will describe the required setup in detail.
                </p>
                <font size="+2" color="red">**** TODO OPISAÆ WIZARDA ****</font>
            </body>
        </section>
    </section>
    <section id="schema">
        <title>O/R Mapping Schema</title>
        <body>
            <p>
                O/R Mapping Schema defines the mapping between CLI classes and database tables. You typically map
                each table in the database to a class, but you can also designate some table to be used for
                resolving the many-to-many relationship, specify that a class is to be based on multiple tables
                or describe a inheritance (<i>"is-a"</i>) relationship.
            </p>
            <p>
                The schema is contained in an XML file that is the input to <a href="#soodastubgen">SoodaStubGen</a> utility which
                generates class stubs. You can write the XML file by hand or you can use a tool, such as 
                <a href="#soodaschematool">SoodaSchemaTool</a> to generate it for you by reverse-engineering the database.
                Note that it's not possible to generate the mapping schema in a automated manner, because there are 
                things that simply aren't stored in the database, but the tools can give you a good approximation of the actual schema.
            </p>
            <p>
                The schema is defined in an XML file, whose root is the <x><schema /></x> element with the appropriate namespace.
                The child elements of the <x><schema /></x> define classes, relations and so on, as described below.
            </p>
            <code lang="XML">
                <![CDATA[
                <schema xmlns="http://www.sooda.org/schemas/SoodaSchema.xsd">
                    <datasource />

                    <class />
                    <class />
                    <class />
                    <class />

                    <relation />
                    <relation />
                </schema>
                ]]>
            </code>
        </body>
        <section id="schemadatasources">
            <title>Data Sources - <x><datasource /></x></title>
            <body>
                <p>
                    Data Sources are defined with the <x><datasource /></x> element. A data source represents a 
                    connection to the database (or other store) where entities are stored. Each data source has a name and type. 
                    Sooda currently supports only <a href="#sqldatasource">Sql Data Source</a>, but
                    it is (theoretically) possible to add more data source types. Unless specified otherwise, the 
                    default data source for a class or relation is "<code>default</code>", which you need to have defined.
                </p>
                <p>
                    Until Sooda supports other data source types, the typical declaration that should occur at the beginning of each
                    mapping schema is:
                </p>
                <code lang="XML">
                    <![CDATA[
                    <schema xmlns="http://www.sooda.org/schemas/SoodaSchema.xsd">
                        <datasource name="default" type="Sooda.Sql.SqlDataSource" />
                    </schema>
                    ]]>
                </code>
                <p>
                    You can define additional SQL-based data sources for example to connect to multiple databases at once. Sooda
                    will keep a single connection to each data source, but won't create one until you use an object that's based on
                    the data source.
                </p>
            </body>
        </section>
        <section id="schemaclasses">
            <title>Classes - <x><class /></x></title>
            <body>
                <p>
                    Classes are defined using the <x><class /></x> element. Each class is based on a number of tables, each represented
                    by a <x><table /></x> element. Each <x><class /></x> has a name, which is used during code generation to produce the 
                    a set of C# or VB classes and other attributes which specify its runtime behavior. The following table lists available
                    attributes of the <x><class /></x> element.
                </p>
                <div class="table">
                    <table>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>name</td>
                                <td>string</td>
                                <td>Class name - used by <a href="#soodastubgen">SoodaStubGen</a> to generate 
                                    the class skeleton, stub, a number of related classes (factory, list wrapper, typed queries and so on)
                                </td>
                            </tr>
                            <tr>
                                <td>cardinality</td>
                                <td>ClassCardinality</td>
                                <td>Specifies the approximate number of instances of this class (number of rows in a table).
                                    Possible values are:
                                    <ul>
                                        <li><b>Small</b> - up to 20-30</li>
                                        <li><b>Medium</b> - more than Small, up to 200-300</li>
                                        <li><b>Large</b> - more than few hundred</li>
                                    </ul>
                                    The default value is <b>Medium</b>. You may want to specify other values as a hint to the cache optimizer.
                                    Other than that, this value is not used.
                                </td>
                            </tr>
                            <tr>
                                <td>datasource</td>
                                <td>string</td>
                                <td>Specifies the name of the <a href="#datasources">data source</a> for this class. The default name is "default".</td>
                            </tr>
                            <tr>
                                <td>extBaseClassName</td>
                                <td>string</td>
                                <td>Specifies the name of the base class that this class should inherit from. By default each class N inherits 
                                    from N_Stub which in turn inherits from SoodaObject. Set this option to make the stub class inherit from some other class.
                                    Note that the class must ultimately inherit from SoodaObject (either directly or indirectly).
                                </td>
                            </tr>
                            <tr>
                                <td>label</td>
                                <td>string</td>
                                <td>Name of the property that provides the displayable "identity" of the object. For example the 
                                    "Person" class might have a label of "Name" or "Email", the "Location" might have a label of "Address".
                                    This is used to generate the default implementation of ToString() for object.
                                </td>
                            </tr>
                            <tr>
                                <td>keygen</td>
                                <td>string</td>
                                <td>Specifies a method that will be used to generate primary keys for newly created objects. 
                                    The following options are supported:
                                    <ul>
                                        <li><b>guid</b> - generate GUID keys in-memory by calling Guid.NewGuid()</li>
                                        <li><b>integer</b> - pregenerates integer keys in the database by storing them in the KeyGen table. This is the default.</li>
                                        <li><b>long</b> - pregenerates long (64-bit) keys in the database by storing them in the KeyGen table.</li>
                                        <li>alternatively you can provide a name of the class that implements IPrimaryKeyGenerator that will provide primary keys. This can call a 
                                            webservice or use other means necessary to generate keys in a coordinated manner, guaranteeing that
                                            no two sessions will ever get the same primary key.</li>
                                    </ul>
                                </td>
                            </tr>
                            <tr>
                                <td>lastModifiedField</td>
                                <td>string</td>
                                <td>
                                    <font size="+2" color="red">**** TODO - IMPLEMENTOWAÆ CZY WYRZUCIÆ ?****</font>
                                </td>
                            </tr>
                            <tr>
                                <td>inheritFrom</td>
                                <td>string</td>
                                <td>
                                    Inherits from the specified class. This parameter 
                                    is explained in the <a href="#schemainheritance">section</a>.
                                </td>
                            </tr>
                            <tr>
                                <td>defaultPrecommitValue</td>
                                <td>depends on primary key type</td>
                                <td>
                                    Specifies the default precommit value for this class. This is the value that will be INSERT'ed into
                                    the database for each not-nullable column that doesn't have a value specified. You can override it on the
                                    <a href="#schemafield"><x><field /></x></a> level.
                                </td>
                            </tr>
                            <tr>
                                <td>subclassSelectorValue</td>
                                <td>depends on primary key type</td>
                                <td>
                                    Specifies the value of the subclass selector field that determines this object type. This parameter 
                                    is explained in the <a href="#schemainheritance">inheritance section</a>.
                                </td>
                            </tr>
                            <tr>
                                <td>subclassSelectorField</td>
                                <td>string</td>
                                <td>
                                    Specifies the name of the subclass selector field that determines this object type. This parameter 
                                    is explained in the <a href="#schemainheritance">inheritance section</a>.
                                </td>
                            </tr>
                            <tr>
                                <td>cached</td>
                                <td>bool</td>
                                <td>
                                    Caching hint. The actual interpretation depends on the <a href="caching">caching policy</a> that's in place.
                                </td>
                            </tr>
                            <tr>
                                <td>cacheCollections</td>
                                <td>bool</td>
                                <td>
                                    Collection caching hint. The actual interpretation depends on the <a href="caching">caching policy</a> that's in place.
                                </td>
                            </tr>
                            <tr>
                                <td>disableTypeCache</td>
                                <td>bool</td>
                                <td>Disable type cache for this type. This parameter is described in the <a href="#schemainheritance">inheritance section</a></td>
                            </tr>
                            <tr>
                                <td>triggers</td>
                                <td>bool</td>
                                <td>Determines whether <a href="#triggers">triggers</a> should be generated for this class.</td>
                            </tr>
                            <tr>
                                <td>readOnly</td>
                                <td>boolean</td>
                                <td>
                                    Determines whether instances of this class should be read-only. No property setters are generated
                                    in such case and some scenarios are optimized.
                                    <font size="+2" color="red">**** TODO - TO NIE DZIA£A - IMPLEMENTOWAÆ CZY WYRZUCIÆ ?****</font>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </body>
        </section>
        <section id="schematable">
            <title>Tables - <x><table /></x></title>
            <body>
            </body>
        </section>
        <section id="schemafield">
            <title>Fields - <x><field /></x></title>
            <body>
            </body>
        </section>
        <section id="schemaconst">
            <title>Named Constants - <x><const /></x></title>
            <body>
            </body>
        </section>
        <section id="schema11">
            <title>One-To-One Relationships - references</title>
            <body>
            </body>
        </section>
        <section id="schema1N">
            <title>One-To-Many Relationships - <x><collectionOneToMany /></x></title>
            <body>
            </body>
        </section>
        <section id="schemaNN">
            <title>Many-To-Many Relationships - <x><collectionManyToMany /></x></title>
            <body>
            </body>
        </section>
        <section id="schemainclude">
            <title>Include Files - <x><include /></x></title>
            <body>
            </body>
        </section>
        <section id="schemainheritance">
            <title>Inheritance</title>
            <body>
            </body>
        </section>
        <section id="schemaprecommitvalues">
            <title>Precommit Values</title>
            <body>
            </body>
        </section>
    </section>
    <section id="compilation">
        <title>Compilation</title>
        <section id="compilationprocess">
            <title>Compilation Process</title>
            <section id="compilationprocessnant">
                <title>NAnt</title>
                <body>
                </body>
            </section>
            <section id="compilationvisualstudio">
                <title>Visual Studio</title>
                <body>
                </body>
            </section>
        </section>
        <section id="typical">
            <title>Sooda Project Files - *.soodaproject</title>
            <body>
            </body>
        </section>
    </section>
    <section id="api">
        <title>API</title>
        <section id="soodatransaction">
            <title>SoodaTransaction</title>
            <body>
            </body>
        </section>
        <section id="soodaobject">
            <title>SoodaObject</title>
            <body>
            </body>
        </section>
        <section id="schema">
            <title>Schema API</title>
            <body>
            </body>
        </section>
        <section id="ql">
            <title>Query API</title>
            <body>
            </body>
        </section>
        <section id="fieldhandlers">
            <title>Field Handlers</title>
            <body>
            </body>
        </section>
        <section id="keygenerators">
            <title>Key Generators</title>
            <body>
            </body>
        </section>
        <section id="caching">
            <title>Caching</title>
            <body>
            </body>
        </section>
        <section id="datasources">
            <title>Data Sources API</title>
            <body>
                <section id="sqldatasource">
                    <title>SQL Data Source</title>
                    <body>
                    </body>
                </section>
                <section id="otherdatasources">
                    <title>Implementing other Data Sources</title>
                    <body>
                    </body>
                </section>
                <section id="configuringdatasources">
                    <title>Configuring Data Source</title>
                    <body>
                    </body>
                </section>
            </body>
        </section>
    </section>
    <section id="generatedcode">
        <title>Generated Code</title>
        <body>
            <section id="generatedclasses">
                <title>Classes</title>
                <body>
                </body>
                <section id="generatedproperties">
                    <title>Properties</title>
                    <body>
                    </body>
                    <section id="generatedpropertiesboxed">
                        <title>Boxed</title>
                        <body>
                        </body>
                    </section>
                    <section id="generatedpropertiessqltypes">
                        <title>SqlTypes</title>
                        <body>
                        </body>
                    </section>
                    <section id="generatedpropertiesraw">
                        <title>Raw</title>
                        <body>
                        </body>
                    </section>
                    <section id="generatedpropertiesrawwithisnull">
                        <title>RawWithIsNull</title>
                        <body>
                        </body>
                    </section>
                    <section id="generatedpropertiesnullable">
                        <title>Nullable&lt;&gt;</title>
                        <body>
                        </body>
                    </section>
                </section>
                <section id="generatedproperties">
                    <title>Triggers</title>
                    <body>
                    </body>
                </section>
            </section>
            <section id="generatedlistwrappers">
                <title>Collections</title>
                <body>
                </body>
            </section>
            <section id="generatedfactories">
                <title>Factories</title>
                <body>
                </body>
            </section>
            <section id="generatedtypedqueries">
                <title>Typed Queries</title>
                <body>
                </body>
            </section>
            <section id="generatedschema">
                <title>Schema</title>
                <body>
                </body>
            </section>
        </body>
    </section>
    <section id="soql">
        <title>Query Language - SOQL</title>
        <section id="soqltext">
            <title>Text-based Queries</title>
            <body>
            </body>
        </section>
        <section id="soqltypedqueries">
            <title>Typed Queries</title>
            <body>
            </body>
        </section>
    </section>
    <section id="tools">
        <title>Tools</title>
        <section id="soodastubgen">
            <title>SoodaStubGen</title>
            <body>
            </body>
        </section>
        <section id="soodacompilestubs">
            <title>SoodaCompileStubs</title>
            <body>
            </body>
        </section>
        <section id="soodafixkeygen">
            <title>SoodaFixKeygen</title>
            <body>
            </body>
        </section>
        <section id="soodaschematool">
            <title>SoodaSchemaTool</title>
            <body>
            </body>
        </section>
        <section id="soodaaddin">
            <title>SoodaAddin</title>
            <body>
            </body>
        </section>
    </section>
    <section id="configuration">
        <title>Configuration</title>
        <body>
        </body>
    </section>
    <section id="logging">
        <title>Logging</title>
        <body>
        </body>
    </section>
</content>
