query_expression ::=
            SELECT     [TOP number] [DISTINCT] select_expressions
            FROM       from_expressions
            [WHERE     boolean_expression]
            [GROUP BY  groupby_expressions]
            [HAVING    boolean_expression]
            [ORDER BY  sort_expressions]

select_expressions ::= <select_expression> {',' select_expression}

from_expressions ::= from_expression {',' from_expression}

groupby_expressions ::= expression {',' expression}

sort_expressions ::= sort_expression {, sort_expression}

select_expression := expression [ AS alias ]

from_expression ::= class_name [ AS alias ]

expression ::= boolean_or

boolean_or ::= boolean_and { OR boolean_and }

boolean_and ::= boolean_predicate { AND boolean_predicate }

boolean_predicate ::= 
            EXISTS '(' query_expression ')'
            | EXISTS '(' simplified_query ')'
            | boolean_relation

boolean_expression ::= boolean_or

class_or_relation_name ::= class_name | relation_name

sort_expression := expression [ ASC | DESC ]

boolean_relation ::= additive_expression
            | additive_expression '=' additive_expression
            | additive_expression '==' additive_expression
            | additive_expression '&lt;&gt;' additive_expression
            | additive_expression '!=' additive_expression
            | additive_expression '&lt;' additive_expression
            | additive_expression '&gt;' additive_expression
            | additive_expression '&lt;=' additive_expression
            | additive_expression '&gt;=' additive_expression
            | additive_expression LIKE additive_expression
            | additive_expression IS [NOT] NULL
            | additive_expression IN '(' expression { ',' expression } ')'

additive_expression ::= multiplicative_expression
            | additive_expression '+' multiplicative_expression
            | additive_expression '-' multiplicative_expression

multiplicative_expression ::= literal_expression
            | multiplicative_expression '*' literal_expression
            | multiplicative_expression '/' literal_expression
            | multiplicative_expression '%' literal_expression

literal_expression ::= 
            number
            string
            positional_parameter
            '(' query_expression ')'
            '(' expression ')'
            NULL
            TRUE
            FALSE
            SOODACLASS
            RAWQUERY '(' raw_query ')'
            function_call
            path_expression
            '(' class_name WHERE boolean_expression ')'
            '-' literal_expression
            NOT boolean_expression

positional_parameter ::= '{' number [ ':' parameter_modifiers ] '}'

parameter_modifiers ::= type_name

function_call ::= function_name '(' [ function_arguments ] ')'

function_arguments ::= expression {',' expression }

simplified_query ::= class_name WHERE boolean_expression

path_expression ::= field_name
            | path_expression '.' field_name
            | path_expression '.' CONTAINS '(' expression ')'
            | path_expression '.' CONTAINS '(' query_expression ')'
            | path_expression '.' CONTAINS '(' simplified_query ')'
            | path_expression '.' COUNT 
            | path_expression '.' SOODACLASS
            | '*'
            | path_expression '.' '*'

-- the string may contain SOQL{{...}} fragments which will be
-- inserted into the SQL sent to RDBMS

raw_query ::= string

alias ::= name

class_name ::= name

relation_name ::= name

name ::= /* Non-empty sequence of letters, numbers and underscore characters,
            which cannot start with a digit */

number ::= /* Non-empty quence of digits with an optional decimal 
             point: 123 or 3.141592 */

string ::= /* String literal in apostrophes such as 'Mary Manager'.
              You can apostrophe character itself by doubling it: 'd''Artagnan' represents d'Artagnan */
