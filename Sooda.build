<?xml version="1.0" encoding="utf-8" ?>
<project name="Sooda" default="build" basedir=".">
    <property name="sooda.debug" value="true" unless="${property::exists('sooda.debug')}" />
    <property name="sooda.optimize" value="false" unless="${property::exists('sooda.optimize')}" />

    <tstamp />

    <property name="release.version" value="${tstamp.date}" unless="${property::exists('release.version')}" />

    <property name="ndoc.console.exe" value="D:\Apps\NDoc\1.1\ndocconsole.exe" />
    <property name="prettyprinter.exe" value="tools/PrettyPrinter.exe" />

    <property name="scp.program" value="pscp" />
    <property name="ssh.program" value="plink" />
    <property name="ssh.server" value="jaak@sav.net" />
    <property name="scp.args" value="-q -batch" />
    <property name="ssh.args" value="-batch" />
    <property name="webserver.deploy.dir" value="web/www.sooda.org/html/test" />

    <property name="sooda.csc.args" value="/nowarn:1591" />
    <property name="sooda.external" value="${nant.project.basedir}/external" unless="${property::exists('sooda.external')}" />
    <property name="sooda.nlog.dir" value="${sooda.external}" unless="${property::exists('sooda.nlog.dir')}" />
    <property name="sooda.log4net.dir" value="${sooda.external}" unless="${property::exists('sooda.log4net.dir')}" />
    <property name="sooda.icsharpcode.texteditor.dir" value="${sooda.external}" unless="${property::exists('sooda.icsharpcode.texteditor.dir')}" />

    <property name="clover.enabled" value="false" />
    <property name="clover.home" value="C:\Program Files\Cenqua\Clover.NET" />
    <property name="boo.home" value="d:\Work\Boo\build" />
    <property name="ironpython.home" value="d:\Apps\IronPython" />

    <property name="sources" value="src" />
    
    <target name="build" depends="build-${nant.settings.currentframework}" />
    <target name="build-net-1.0" depends="build-common, tools" />
    <target name="build-net-1.1" depends="build-common, tools" />
    <target name="build-net-2.0" depends="build-common, tools, Sooda.Web" />
    <target name="build-netcf-1.0" depends="build-common" />
    <target name="build-mono-1.0" depends="build-common, minitools" />

    <target name="build-common" depends="configure, libraries" />
    <target name="tools" depends="SoodaStubGen, SoodaQuery, SoodaSchemaTool, SoodaFixKeygen, SoodaCompileStubs" />
    <target name="minitools" depends="SoodaStubGen, SoodaCompileStubs" />

    <target name="libraries" depends="Sooda, Sooda.Logging.NLog, Sooda.Logging.log4net" />

    <target name="configure">
        <property name="sooda.define" value="NANT" />
        <property name="sooda.optimize" value="false" />
        <property name="sooda.optimize" value="true" unless="${sooda.debug}" />

        <property name="buildsubdir" value="${framework::get-target-framework()}${if(clover.enabled,'-clover','')}${if(sooda.debug,'-debug','')}" />
        
        <property name="sooda.dir" value="${nant.project.basedir}/build/${buildsubdir}/bin" unless="${property::exists('sooda.dir')}" />
        <property name="web.dir" value="build/${buildsubdir}/web" unless="${property::exists('web.dir')}" />
        <property name="help.dir" value="build/${buildsubdir}/help" unless="${property::exists('help.dir')}" />
        <property name="helpweb.dir" value="build/${buildsubdir}/helpweb" unless="${property::exists('helpweb.dir')}" />

        <mkdir dir="${sooda.dir}" />

        <call target="configure-${nant.settings.currentframework}" 
            if="${target::exists('configure-' + nant.settings.currentframework)}" />

        <echo message="basedir:   ${nant.project.basedir}" />
        <echo message="external:  ${sooda.external}" />
        <echo message="defines:   ${sooda.define}" />
        <echo message="optimize:  ${sooda.optimize}" />
        <echo message="output:    ${sooda.dir}" />
        <echo message="framework: ${nant.settings.currentframework.description}" />
    </target>

    <target name="configure-net-1.0">
        <property name="sooda.define" value="${sooda.define},SOODA_NO_ODBC" />
    </target>

    <target name="configure-net-2.0">
        <property name="sooda.csc.args" value="/nowarn:1591,1699" />
        <property name="sooda.define" value="${sooda.define},DOTNET2" />
    </target>

    <target name="release">
        <property name="sooda.debug" value="false" />
        <property name="sooda.optimize" value="true" />
    </target>

    <target name="debug">
        <property name="sooda.debug" value="true" />
        <property name="sooda.optimize" value="false" />
    </target>

    <target name="Sooda" depends="configure" description="Sooda">
        <csc target="library" output="${sooda.dir}/Sooda.dll" doc="${sooda.dir}/Sooda.xml" debug="${sooda.debug}" define="${sooda.define}" warnaserror="true">
            <references>                                  
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.XML.dll" />
                <include name="System.Data.dll" />
                <include name="System.Drawing.dll" />
            </references>
            <sources basedir="src/Sooda">
                <include name="**/*.cs" />
            </sources>
            <resources basedir="src/Sooda" prefix="Sooda" dynamicprefix="true">
                <include name="Schema/SoodaSchema.xsd" />
            </resources>
            <arg value="${sooda.csc.args}"/>
        </csc>
    </target>

    <target name="Sooda.Logging.NLog" depends="configure, Sooda, NLog" description="Sooda">
        <csc target="library" output="${sooda.dir}/Sooda.Logging.NLog.dll" doc="${sooda.dir}/Sooda.Logging.NLog.xml" debug="${sooda.debug}" define="${sooda.define}" warnaserror="true">
            <references>                                  
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.XML.dll" />
                <include name="System.Data.dll" />
                <include name="System.Drawing.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="${sooda.nlog.dir}/NLog.dll" />
            </references>
            <sources basedir="src/Sooda.Logging.NLog">
                <include name="**/*.cs" />
            </sources>
            <arg value="${sooda.csc.args}"/>
        </csc>
    </target>

    <target name="Sooda.Web" depends="configure, Sooda">
        <csc target="library" output="${sooda.dir}/Sooda.Web.dll" debug="${sooda.debug}" define="${sooda.define}" warnaserror="true">
            <references>                                  
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.XML.dll" />
                <include name="System.Data.dll" />
                <include name="System.Drawing.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
            </references>
            <sources basedir="src/Sooda.Web">
                <include name="**/*.cs" />
            </sources>
        </csc>
    </target>

    <target name="Sooda.Logging.log4net" depends="configure, log4net" description="Sooda">
        <csc target="library" output="${sooda.dir}/Sooda.Logging.log4net.dll" doc="${sooda.dir}/Sooda.Logging.log4net.xml" debug="${sooda.debug}" define="${sooda.define}" warnaserror="true">
            <references>                                  
                <include name="mscorlib.dll" />
                <include name="System.dll" />
                <include name="System.XML.dll" />
                <include name="System.Data.dll" />
                <include name="System.Drawing.dll" />
                <include name="${sooda.dir}/log4net.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
            </references>
            <sources basedir="src/Sooda.Logging.log4net">
                <include name="**/*.cs" />
            </sources>
            <arg value="${sooda.csc.args}"/>
        </csc>
    </target>

    <target name="Sooda.CodeGen" depends="configure, Sooda">
        <csc target="library" output="${sooda.dir}/Sooda.CodeGen.dll" debug="${sooda.debug}" define="${sooda.define}" warnaserror="true">
            <references>                                  
                <include name="${sooda.dir}/Sooda.dll" />
            </references>
            <sources basedir="src/Sooda.CodeGen">
                <include name="**/*.cs" />
            </sources>
            <resources basedir="src/Sooda.CodeGen" prefix="Sooda.CodeGen" dynamicprefix="true">
                <include name="Templates/**/*" />
                <include name="CDIL/Templates/**/*.cdil" />
                <include name="SoodaProject.xsd" />
            </resources>
            <arg value="${sooda.csc.args}"/>
        </csc>
    </target>

    <target name="SoodaStubGen" depends="configure, Sooda, Sooda.CodeGen">
        <csc target="exe" output="${sooda.dir}/SoodaStubGen.exe" debug="${sooda.debug}" define="${sooda.define},NO_VB,NO_JSCRIPT">
            <references>                                  
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="${sooda.dir}/Sooda.CodeGen.dll" />
            </references>
            <sources basedir="src/SoodaStubGen">
                <include name="**/*.cs" />
            </sources>
            <arg value="${sooda.csc.args}"/>
        </csc>
        <copy file="src/SoodaStubGen/App.config" tofile="${sooda.dir}/SoodaStubGen.exe.config" />
    </target>

    <target name="SoodaCompileStubs" depends="configure, Sooda">
        <csc target="exe" output="${sooda.dir}/SoodaCompileStubs.exe" debug="${sooda.debug}" define="${sooda.define}" warnaserror="true">
            <references>                                  
                <include name="${sooda.dir}/Sooda.dll" />
            </references>
            <sources basedir="src/SoodaCompileStubs">
                <include name="*.cs" />
            </sources>
            <arg value="${sooda.csc.args}"/>
        </csc>
    </target>

    <target name="SoodaSchemaTool" depends="configure, Sooda">
        <csc target="exe" output="${sooda.dir}/SoodaSchemaTool.exe" debug="${sooda.debug}" define="${sooda.define}" warnaserror="true">
            <references>                                  
                <include name="System.Data.dll" asis="true" />
                <include name="${sooda.dir}/Sooda.dll" />
            </references>
            <sources basedir="src/SoodaSchemaTool">
                <include name="*.cs" />
            </sources>
            <arg value="${sooda.csc.args}"/>
        </csc>
    </target>

    <target name="SoodaFixKeygen" depends="configure, Sooda">
        <csc target="exe" output="${sooda.dir}/SoodaFixKeygen.exe" debug="${sooda.debug}" define="${sooda.define}" warnaserror="true">
            <references>                                  
                <include name="System.Data.dll" asis="true" />
                <include name="${sooda.dir}/Sooda.dll" />
            </references>
            <sources basedir="src/SoodaFixKeygen">
                <include name="*.cs" />
            </sources>
            <arg value="${sooda.csc.args}"/>
        </csc>
    </target>

    <target name="SoodaQuery" depends="configure, Sooda, ICSharpCode.TextEditor">
        <csc target="winexe" output="${sooda.dir}/SoodaQuery.exe" debug="${sooda.debug}" define="${sooda.define}" win32icon="src/SoodaQuery/app.ico">
            <references>                                  
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="${sooda.dir}/ICSharpCode.TextEditor.dll" />
            </references>
            <sources basedir="src/SoodaQuery">
                <include name="*.cs" />
            </sources>
            <resources basedir="src/SoodaQuery" prefix="SoodaQuery" dynamicprefix="true">
                <include name="MainForm.resx" />
                <include name="*.xshd" />
                <include name="SyntaxModes.xml" />
            </resources>
            <arg value="${sooda.csc.args}"/>
        </csc>
        <copy file="src/SoodaQuery/App.config" tofile="${sooda.dir}/SoodaQuery.exe.config" />
        <copy file="src/SoodaQuery/SoodaQuery.exe.manifest" tofile="${sooda.dir}/SoodaQuery.exe.manifest" />
        <copy file="${sooda.external}/ICSharpCode.TextEditor.dll" tofile="${sooda.dir}/ICSharpCode.TextEditor.dll" />
    </target>

    <target name="clean" depends="configure" description="Delete *.exe,*.dll,*.pdb and *.exe files from output directory">
        <delete>
            <fileset defaultexcludes="false">
                <include name="SetupSooda.exe" />
                <include name="*.suo" />
                <include name="${sooda.dir}/Sooda*.dll" />
                <include name="${sooda.dir}/Sooda*.exe" />
                <include name="${sooda.dir}/Sooda*.pdb" />
                <include name="${sooda.dir}/Sooda*.xml" />
                <include name="${sooda.dir}/*.tlb" />
                <include name="${sooda.dir}/*.exe.config" />
                <include name="${sooda.dir}/*.exe.manifest" />
                <include name="**/*.tmp" />
                <include name="tests/UnitTestObjects/_Stubs.cs" />
                <include name="tests/UnitTestObjects/_DBSchema.bin" />
                <include name="tests/UnitTestObjects/_DBSchema.xml" />
                <include name="examples/**/_Stubs.cs" />
                <include name="examples/**/_DBSchema.bin" />
                <include name="examples/**/*.csproj.user" />
            </fileset>
        </delete>
        <foreach item="Folder" property="dirname">
            <in>
                <items>
                    <include name="src/**/bin" />
                    <include name="src/**/obj" />
                    <include name="examples/**/bin" />
                    <include name="examples/**/obj" />
                    <include name="tests/**/bin" />
                    <include name="tests/**/obj" />
                </items>
            </in>
            <do>
                <delete dir="${dirname}" />
            </do>
        </foreach>    
        <nant buildfile="examples/Soodawind/Soodawind.build" target="clean" />
    </target>

    <target name="tarbz2" description="Creates a .tar.bz2 snapshot of sources" depends="configure, clean">
        <tstamp property="build.date" pattern="yyyyMMdd_HHmm" verbose="true" />
        <exec workingdir=".." program="tar" commandline="cvf sooda-${build.date}.tar sooda/" />
        <exec workingdir=".." program="bzip2" commandline="-9 sooda-${build.date}.tar" />
    </target>

    <target name="zip" depends="clean">
        <tstamp property="build.date" pattern="yyyyMMdd" verbose="true" />
        <property name="zipfile" value="sooda_${build.date}.zip" />
        <zip zipfile="${zipfile}">
            <fileset>
                <include name="**/*" />
                <exclude name="**/*.swp" />
                <exclude name="**/.svn" />
                <exclude name="**/.svn/**" />
                <exclude name="${zipfile}" />
            </fileset>
        </zip>
    </target>

    <target name="contest" depends="ConsoleTest">
        <exec workingdir="bin" program="${sooda.dir}/ConsoleTest.exe" commandline="" />
    </target>

    <target name="nunit-gui" depends="Sooda.UnitTests.TestCases">
        <exec workingdir="${sooda.dir}" program="nunit-gui.exe" commandline="${sooda.dir}/Sooda.UnitTests.TestCases.dll" />
    </target>

    <target name="nunit-console" depends="Sooda.UnitTests.TestCases">
        <exec verbose="true" workingdir="${sooda.dir}" program="nunit-console.exe" commandline="${sooda.dir}/Sooda.UnitTests.TestCases.dll" />
    </target>

    <target name="test" depends="Sooda.UnitTests.TestCases, Sooda.UnitTests.VBObjects">
        <nunit2>
            <formatter type="Plain" />
            <test assemblyname="${sooda.dir}/Sooda.UnitTests.TestCases.dll" appconfig="tests/TestCases/App.config" />
        </nunit2>
    </target>

    <target name="Sooda.NAnt.Tasks" depends="Sooda, Sooda.CodeGen">
        <csc target="library" output="${sooda.dir}/Sooda.NAnt.Tasks.dll" debug="true">
            <references>                                  
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="${sooda.dir}/Sooda.CodeGen.dll" />
                <include name="${nant.location}/NAnt.Core.dll" />
            </references>
            <sources basedir="src/Sooda.NAnt.Tasks">
                <include name="*.cs" />
            </sources>
        </csc>
        <loadtasks assembly="${sooda.dir}/Sooda.NAnt.Tasks.dll" />
    </target>

    <target name="Sooda.UnitTests.BaseObjects" depends="Sooda, Sooda.NAnt.Tasks, SoodaStubGen">
        <sooda-generate-code project="tests/BaseObjects/Sooda.UnitTests.BaseObjects.soodaproject" verbose="true" />

        <csc target="library" output="${sooda.dir}/Sooda.UnitTests.BaseObjects.dll" debug="true">
            <references>                                  
                <include name="${sooda.dir}/NLog.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="System.Data.dll" asis="true" />
            </references>
            <sources basedir="tests/BaseObjects">
                <include name="*.cs" />
            </sources>
            <resources basedir="tests/BaseObjects" prefix="Sooda.UnitTests.BaseObjects" dynamicprefix="true">
                <include name="_DBSchema.*" />
            </resources>
        </csc>
    </target>

    <target name="Sooda.UnitTests.BaseObjects.CSharpSeparate" depends="Sooda, Sooda.NAnt.Tasks, SoodaStubGen">
        <sooda-generate-code project="tests/BaseObjects.CSharpSeparate/Sooda.UnitTests.BaseObjects.CSharpSeparate.soodaproject" verbose="true" />

        <csc target="library" output="${sooda.dir}/Sooda.UnitTests.BaseObjects.CSharpSeparate.dll" debug="true">
            <references>                                  
                <include name="${sooda.dir}/NLog.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="System.Data.dll" asis="true" />
            </references>
            <sources basedir="tests/BaseObjects.CSharpSeparate">
                <include name="*.cs" />
            </sources>
            <resources basedir="tests/BaseObjects.CSharpSeparate" prefix="Sooda.UnitTests.BaseObjects.CSharpSeparate" dynamicprefix="true">
                <include name="_DBSchema.*" />
            </resources>
        </csc>
    </target>

    <target name="Sooda.UnitTests.BaseObjects.Boo" depends="Sooda, Sooda.NAnt.Tasks">
        <copy todir="${sooda.dir}">
            <fileset basedir="${boo.home}">
                <include name="Boo.Lang.CodeDom.dll" />
                <include name="Boo.Lang.dll" />
            </fileset>
        </copy>
        <sooda-generate-code project="tests/BaseObjects.Boo/Sooda.UnitTests.BaseObjects.Boo.soodaproject" verbose="true" />

        <loadtasks assembly="${boo.home}\Boo.Nant.Tasks.dll" />
        <booc target="library" output="${sooda.dir}/Sooda.UnitTests.BaseObjects.Boo.dll" debug="true" verbose="true">
            <references>                                  
                <include name="${sooda.dir}/NLog.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="System.Data.dll" asis="true" />
            </references>
            <sources basedir="tests/BaseObjects.Boo">
                <include name="*.boo" />
            </sources>
        </booc>
    </target>

    <target name="Sooda.UnitTests.BaseObjects.IronPython" depends="Sooda, Sooda.NAnt.Tasks">
        <copy todir="${sooda.dir}">
            <fileset basedir="${ironpython.home}">
                <include name="IronPython.dll" />
                <include name="IronMath.dll" />
            </fileset>
        </copy>
        <sooda-generate-code project="tests/BaseObjects.IronPython/Sooda.UnitTests.BaseObjects.IronPython.soodaproject" verbose="true" />

        <booc target="library" output="${sooda.dir}/Sooda.UnitTests.BaseObjects.IronPython.dll" debug="true" verbose="true">
            <references>                                  
                <include name="${sooda.dir}/NLog.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="System.Data.dll" asis="true" />
            </references>
            <sources basedir="tests/BaseObjects.IronPython">
                <include name="*.boo" />
            </sources>
        </booc>
    </target>

    <target name="Sooda.UnitTests.BaseObjects.VJSharp" depends="Sooda, Sooda.NAnt.Tasks">
        <sooda-generate-code project="tests/BaseObjects.VJSharp/Sooda.UnitTests.BaseObjects.VJSharp.soodaproject" verbose="true" />

        <vjc target="library" output="${sooda.dir}/Sooda.UnitTests.BaseObjects.VJSharp.dll" debug="true" verbose="true">
            <references>                                  
                <include name="${sooda.dir}/NLog.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="System.Data.dll" asis="true" />
                <include name="System.Xml.dll" />
            </references>
            <sources basedir="tests/BaseObjects.VJSharp">
                <include name="*.jsl" />
            </sources>
            <resources basedir="tests/BaseObjects.VJSharp" prefix="Sooda.UnitTests.BaseObjects.VJSharp" dynamicprefix="true">
                <include name="_DBSchema.*" />
            </resources>
        </vjc>
    </target>

    <target name="Sooda.UnitTests.BaseObjects.JScript" depends="Sooda, Sooda.NAnt.Tasks">
        <sooda-generate-code project="tests/BaseObjects.JScript/Sooda.UnitTests.BaseObjects.JScript.soodaproject" verbose="true" />

        <jsc target="library" output="${sooda.dir}/Sooda.UnitTests.BaseObjects.dll" debug="true">
            <references>                                  
                <include name="${sooda.dir}/NLog.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="System.Data.dll" />
                <include name="System.Xml.dll" />
            </references>
            <sources basedir="tests/BaseObjects.JScript">
                <include name="*.js" />
            </sources>
            <resources basedir="tests/BaseObjects.JScript" prefix="Sooda.UnitTests.BaseObjects.JScript" dynamicprefix="true">
                <include name="_DBSchema.*" />
            </resources>
        </jsc>
    </target>

    <target name="Sooda.UnitTests.BaseObjects.Nemerle" depends="Sooda, Sooda.NAnt.Tasks">
        <sooda-generate-code project="tests/BaseObjects.Nemerle/Sooda.UnitTests.BaseObjects.Nemerle.soodaproject" verbose="true" />

        <loadtasks assembly="c:/program files/nemerle/Nemerle.NAnt.Tasks.dll" />

        <ncc target="library" output="${sooda.dir}/Sooda.UnitTests.BaseObjects.dll" debug="true">
            <references>                                  
                <include name="${sooda.dir}/NLog.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
            </references>
            <sources basedir="tests/BaseObjects.Nemerle">
                <include name="*.n" />
            </sources>
            <resources basedir="tests/BaseObjects.Nemerle" prefix="Sooda.UnitTests.BaseObjects.Nemerle" dynamicprefix="true">
                <include name="_DBSchema.*" />
            </resources>
        </ncc>
    </target>

    <target name="Sooda.UnitTests.BaseObjects.C++" depends="Sooda, Sooda.NAnt.Tasks">
        <sooda-generate-code project="tests/BaseObjects.C++/Sooda.UnitTests.BaseObjects.C++.soodaproject" verbose="true" />
    </target>

    <target name="Sooda.UnitTests.Objects" depends="Sooda, SoodaStubGen, Sooda.UnitTests.BaseObjects">
        <sooda-generate-code project="tests/UnitTestObjects/Sooda.UnitTests.Objects.soodaproject" verbose="true" />

        <csc target="library" output="${sooda.dir}/Sooda.UnitTests.Objects.dll" debug="true">
            <references>                                  
                <include name="${sooda.dir}/NLog.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="${sooda.dir}/Sooda.UnitTests.BaseObjects.dll" />
                <include name="System.Data.dll" asis="true" />
            </references>
            <sources basedir="tests/UnitTestObjects">
                <include name="*.cs" />
            </sources>
            <resources basedir="tests/UnitTestObjects" prefix="Sooda.UnitTests.Objects" dynamicprefix="true">
                <include name="_DBSchema.*" />
            </resources>
        </csc>
    </target>

    <target name="Sooda.UnitTests.VBObjects" depends="Sooda, SoodaStubGen, Sooda.UnitTests.BaseObjects">
        <sooda-generate-code project="tests/VBUnitTestObjects/Sooda.UnitTests.VBObjects.soodaproject" verbose="true" />

        <vbc target="library" output="${sooda.dir}/Sooda.UnitTests.VBObjects.dll" debug="true">
            <references>                                  
                <include name="${sooda.dir}/NLog.dll" />
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="${sooda.dir}/Sooda.UnitTests.BaseObjects.dll" />
                <include name="System.Data.dll" asis="true" />
                <include name="System.Xml.dll" asis="true" />
            </references>
            <sources basedir="tests/VBUnitTestObjects">
                <include name="*.vb" />
            </sources>
            <resources basedir="tests/VBUnitTestObjects" prefix="Sooda.UnitTests.Objects" dynamicprefix="true">
                <include name="_DBSchema.*" />
            </resources>
        </vbc>
    </target>

    <target name="Sooda.UnitTests.CppObjects" depends="Sooda.NAnt.Tasks, Sooda, SoodaStubGen, Sooda.UnitTests.BaseObjects">
        <sooda-generate-code project="tests/CppUnitTestObjects/Sooda.UnitTests.CppObjects.soodaproject" verbose="true" />
    </target>

    <target name="Sooda.UnitTests.TestCases" depends="libraries, Sooda.UnitTests.Objects, Sooda.UnitTests.BaseObjects">
        <copy file="${nant.location}/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/nunit.framework.dll" tofile="${sooda.dir}/nunit.framework.dll" />
        <csc target="library" output="${sooda.dir}/Sooda.UnitTests.TestCases.dll" debug="true">
            <references>                                  
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="${sooda.dir}/Sooda.UnitTests.BaseObjects.dll" />
                <include name="${sooda.dir}/Sooda.UnitTests.Objects.dll" />
                <include name="${sooda.dir}/nunit.framework.dll" />
                <include name="${sooda.dir}/NLog.dll" />
                <include name="System.Data.dll" asis="true" />
            </references>
            <sources basedir="tests/TestCases">
                <include name="**/*.cs" />
            </sources>
        </csc>
    </target>

    <target name="ConsoleTest" depends="Sooda, Sooda.UnitTests.TestCases">
        <csc target="exe" output="${sooda.dir}/ConsoleTest.exe" debug="true">
            <references>                                  
                <include name="${sooda.dir}/Sooda.dll" />
                <include name="${sooda.dir}/Sooda.UnitTests.Objects.dll" />
                <include name="${sooda.dir}/Sooda.UnitTests.Objects.Stubs.dll" />
                <include name="${sooda.dir}/Sooda.UnitTests.TestCases.dll" />
                <include name="${sooda.dir}/NUnit.Framework.dll" />
                <include name="${sooda.dir}/NLog.dll" />
                <include name="System.Data.dll" asis="true" />
            </references>
            <sources basedir="tests/ConsoleTest">
                <include name="*.cs" />
            </sources>
        </csc>
        <copy file="tests/ConsoleTest/App.config" tofile="${sooda.dir}/ConsoleTest.exe.config" />
    </target>

    <target name="dist">
        <property name="sooda.debug" value="false" />
        <property name="sooda.dir" value="bin" />

        <call target="newbuild" />
        <call target="clean" />
        <call target="build" />
        <call target="installer" />
    </target>

    <target name="cleaninstaller">
        <exec program="nant" commandline="-t:net-1.1 clean" />
        <exec program="nant" commandline="-t:net-2.0 clean" />

        <call target="clean_wizards" />
        <nant buildfile="examples/Soodawind/Soodawind.build" target="clean" />
        
        <call target="installer" />
    </target>
    <target name="installer" depends="vs2005_wizards">
        <exec program="nant" commandline="-t:net-1.1 build doc" />
        <exec program="nant" commandline="-t:net-2.0 build" />

        <readregistry property="nsis.dir" key="SOFTWARE\NSIS\" />
        <property name="makensis.exe" value="${nsis.dir}/makensis.exe" />

        <foreach item="Line" in="sooda.version" delim="." property="sooda.major,sooda.minor,sooda.revision,sooda.build">
            <exec program="${makensis.exe}" commandline="/DSOODA_VERSION=${sooda.major}.${sooda.minor} /DRELEASE_VERSION=${release.version} tools\SetupSooda.nsi" />
        </foreach>
    </target>

    <target name="NLog">
        <copy todir="${sooda.dir}">
            <fileset basedir="${sooda.nlog.dir}">
                <include name="NLog*.dll" />
                <include name="NLog*.pdb" />
                <include name="NLog*.xml" />
            </fileset>
        </copy>
    </target>

    <target name="log4net">
        <copy todir="${sooda.dir}">
            <fileset basedir="${sooda.log4net.dir}">
                <include name="log4net.dll" />
            </fileset>
        </copy>
    </target>

    <target name="ICSharpCode.TextEditor">
        <copy todir="${sooda.dir}">
            <fileset basedir="${sooda.icsharpcode.texteditor.dir}">
                <include name="ICSharpCode.TextEditor.*" />
            </fileset>
        </copy>
    </target>

    <target name="disttest">
        <nant buildfile="UnitTests/unittests.build" target="clean" />
        <nant buildfile="UnitTests/unittests.build" target="test" />
        <nant buildfile="UnitTests/unittests.build" target="teststubs" />
    </target>

    <target name="updateversion">
        <foreach item="Line" in="sooda.version" delim=";" property="sooda.version">
            <exec workingdir="${nant.project.basedir}" program="tools/ReplaceVersion.exe" commandline="src ${sooda.version}" />
        </foreach>
    </target>

    <target name="newbuild">
        <exec workingdir="${nant.project.basedir}" 
            program="tools/NewBuild.exe" 
            commandline="${nant.project.basedir}/sooda.version build" />
        <call target="updateversion" />
    </target>

    <target name="newrevision">
        <exec workingdir="${nant.project.basedir}" program="tools/NewBuild.exe" commandline="${nant.project.basedir}/sooda.version revision" />
        <call target="updateversion" />
    </target>

    <target name="newminor">
        <exec workingdir="${nant.project.basedir}" program="tools/NewBuild.exe" commandline="${nant.project.basedir}/sooda.version minor" />
        <call target="updateversion" />
    </target>

    <target name="newmajor">
        <exec workingdir="${nant.project.basedir}" program="tools/NewBuild.exe" commandline="${nant.project.basedir}/sooda.version major" />
        <call target="updateversion" />
    </target>

    <target name="sln">
        <solution configuration="Release" solutionfile="Sooda.sln" />
    </target>

    <target name="msbuild">
        <exec program="${nant.settings.currentframework.frameworkdirectory}/msbuild.exe" commandline="Sooda-net-2.0.sln" />
    </target>

    <target name="precommitcheck">
        <call target="clean" />
        <property name="nant.settings.currentframework" value="net-2.0" />
        <call target="msbuild" />
        <property name="nant.settings.currentframework" value="net-1.1" />
        <call target="sln" />
        <exec program="nant" commandline="-t:net-1.1 clean build" />
        <exec program="nant" commandline="-t:net-2.0 clean build" />
    </target>

    <target name="keyfile">
        <exec program="${nant.settings.currentframework.sdkdirectory}/sn.exe" workingdir="${nant.project.basedir}" commandline="-q -k Sooda.snk"/>
    </target>

    <target name="keyfile-mono">
        <exec useruntimeengine="true" program="${nant.settings.currentframework.sdkdirectory}/sn.exe" workingdir="${nant.project.basedir}" commandline="-q -k Sooda.snk"/>
        <exec useruntimeengine="true" program="${nant.settings.currentframework.sdkdirectory}/sn.exe" workingdir="${nant.project.basedir}" commandline="-q -i Sooda.snk SoodaPublisherKey"/>
    </target>

    <target name="putty">
        <property name="scp.program" value="pscp" />
        <property name="ssh.program" value="plink" />
        <property name="scp.args" value="-q -batch" />
        <property name="ssh.args" value="-batch" />
    </target>

    <target name="astyle">
        <astyle style="NAnt" cleanup="true">
            <fileset>
                <include name="**/*.cs" />
                <exclude name="**/_*.cs" />
            </fileset>
        </astyle>
    </target>

    <target name="deploy-web" depends="website">
        <delete file="web.zip" if="${file::exists('web.zip')}" />
        <zip zipfile="web.zip" stampdatetime="${datetime::now()}" includeemptydirs="true">
            <fileset basedir="${web.dir}">
                <include name="**/*" />
                <exclude name="index.html" />
                <exclude name="examples/Soodawind/**" />
                <exclude name="**/.svn" />
                <exclude name="**/.svn/**" />
                <exclude name="**/_svn" />
                <exclude name="**/_svn/**" />
                <exclude name="**/*.swp" />
            </fileset>
        </zip>
        <echo message="Uploading web.zip and tools/web_install.sh to ${ssh.server}..." />
        <exec program="${scp.program}" commandline="${scp.args} web.zip tools/web_install.sh ${ssh.server}:." workingdir="." />
        <echo message="Spawning web_install.sh..." />
        <exec program="${ssh.program}" commandline="${ssh.args} ${ssh.server} dos2unix web_install.sh &amp;&amp; /bin/bash web_install.sh ${webserver.deploy.dir}" workingdir="." />
        <!-- <delete file="web.zip" /> -->
    </target>

    <target name="install-wizard-vs2003">
        <readregistry property="vcsharp.dir" key="Software\Microsoft\VisualStudio\7.1\Setup\VC#\ProductDir" />
        <echo message="Installing C# wizards to ${vcsharp.dir}" />
        <copy todir="${vcsharp.dir}\CSharpProjectItems">
            <fileset basedir="wizard/vs2003/CSharpProjectItems">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${vcsharp.dir}\VC#Wizards">
            <fileset basedir="wizard/vs2003/VC#Wizards">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${vcsharp.dir}\CSharpProjects">
            <fileset basedir="wizard/vs2003/CSharpProjects">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>

    <target name="doc" depends="configure, build, website, helpwebsite">
        <copy file="${nant.project.basedir}/web/syntax.xsl" tofile="build/${buildsubdir}/syntax.xsl" overwrite="true" />
        <xmlpoke file="build/${buildsubdir}/syntax.xsl" xpath="//xsl:param[@name='external-base']" value="file://${webbuild.dir}">
            <namespaces>
                <namespace prefix="xsl" uri="http://www.w3.org/1999/XSL/Transform" />
            </namespaces>
        </xmlpoke>
        <copy file="${nant.project.basedir}/Sooda-${framework::get-target-framework()}.ndoc" tofile="build/${buildsubdir}/Sooda.ndoc" />
        <copy todir="build/${buildsubdir}/help/examples">
            <fileset basedir="build/${buildsubdir}/helpweb/examples">
                <include name="**/*" />
            </fileset>
        </copy>
        <uptodate property="help.uptodate">
            <targetfiles>
                <include name="${help.dir}/Sooda.chm" />
            </targetfiles>
            <sourcefiles basedir="build/${buildsubdir}">
                <include name="**/*.dll" />
                <include name="web/**/*" />
                <include name="Sooda.ndoc" />
            </sourcefiles>
        </uptodate>
        <if test="${not help.uptodate}">
            <exec program="${ndoc.console.exe}" workingdir="build/${buildsubdir}" commandline="-documenter=MSDN -project=.\Sooda.ndoc" />
        </if>
    </target>

    <target name="website" depends="configure">
        <property name="webbuild.dir" value="${web.dir}" />
        <property name="web.buildmode" value="web" />
        <property name="web.sourceforge" value="0" />
        <call target="buildwebsite" />
        <copy file="${webbuild.dir}/introduction.html" tofile="${webbuild.dir}/index.html" />
        <copy file="src/Sooda/Schema/SoodaSchema.xsd" tofile="${webbuild.dir}/schemas/SoodaSchema.xsd" />
        <copy file="web/redirector.html" tofile="${web.dir}/redirector.html" />
        <copy file="web/redirector.php" tofile="${web.dir}/redirector.php" />
    </target>

    <target name="helpwebsite" depends="configure">
        <property name="webbuild.dir" value="${helpweb.dir}" />
        <property name="web.buildmode" value="help" />
        <property name="web.sourceforge" value="0" />
        <call target="buildwebsite" />
        <copy file="${webbuild.dir}/introduction.html" tofile="${webbuild.dir}/index.html" />
    </target>

    <target name="buildwebsite" depends="configure">
        <mkdir dir="${webbuild.dir}" />
        <mkdir dir="build\webtmp" />
        <mkdir dir="${webbuild.dir}/examples" />

        <copy todir="${webbuild.dir}">
            <fileset basedir="web">
                <include name="*.css" />
                <include name="*.png" />
                <include name="*.jpg" />
                <include name="*.gif" />
                <include name="screenshots/**" />
            </fileset>
        </copy>

        <exec program="external/NDocSyntax.exe" 
              commandline="-outDir build\webtmp web/*.xml" 
              workingdir="." useruntimeengine="true" />

        <copy todir="${webbuild.dir}/examples">
            <fileset basedir="examples">
                <include name="**/*" />
            </fileset>
        </copy>

        <style destdir="${webbuild.dir}" style="web/style.xsl">
            <infiles basedir="build\webtmp">
                <include name="*.xml" />
                <exclude name="webmenu.xml" />
                <exclude name="helpmenu.xml" />
            </infiles>
            <parameters>
                <parameter name="external-base" value="${path::combine(nant.project.basedir,webbuild.dir)}" />
                <parameter name="file_extension" value="html" />
                <parameter name="sourceforge" value="${web.sourceforge}" />
                <parameter name="mode" value="${web.buildmode}" />
            </parameters>
        </style>

        <mkdir dir="build/doc" />

        <style in="build/webtmp/documentation.xml" out="build/doc/documentation.html" style="web/style.xsl">
            <parameters>
                <parameter name="external-base" value="${path::combine(nant.project.basedir,webbuild.dir)}" />
                <parameter name="file_extension" value="html" />
                <parameter name="mode" value="plain" />
            </parameters>
        </style>

        <copy todir="build/doc">
            <fileset basedir="web">
                <include name="rightarrow*.gif" />
                <include name="doc*.gif" />
                <include name="doc*.png" />
                <include name="*.css" />
                <include name="sooda.jpg" />
            </fileset>
        </copy>
    </target>
    
    <target name="coverage">
        <call target="clover" />
        <call target="build" />
        <call target="test" />
        <call target="clover-html-report" />
    </target>

    <target name="upload-coverage">
        <zip zipfile="coverage.zip">
            <fileset basedir="temp/clover-report">
                <include name="**/*" />
            </fileset>
        </zip>
        <exec program="${scp.program}" commandline="${scp.args} coverage.zip tools/coverage_install.sh ${ssh.server}:." workingdir="." />
        <exec program="${ssh.program}" commandline="${ssh.args} ${ssh.server} dos2unix coverage_install.sh &amp;&amp; /bin/bash coverage_install.sh&quot;" workingdir="." />
    </target>

    <target name="load-clover">
        <loadtasks assembly="${clover.home}\CloverNAnt-0.85.dll" />
    </target>

    <target name="clover" depends="configure, load-clover">
        <!--
        <delete dir="CloverBuild" failonerror="false" />
        <mkdir dir="CloverBuild" />
        -->
        <property name="clover.enabled" value="true" />
        <clover-setup 
            initstring="CloverBuild/clover.cdb"
            builddir="CloverBuild"
            enabled="${clover.enabled}"
            flushinterval="1000"
            />
    </target>

    <target name="clover-html-report" depends="clover">
        <clover-report>
            <current title="Sooda Coverage" output="temp/clover-report">
                <format type="html" />
            </current>
        </clover-report>
    </target>

    <target name="clean_wizards">
        <delete>
            <fileset basedir="wizard">
                <include name="**/bin/**" />
                <include name="**/obj/**" />
                <include name="**/Stubs/**" />
                <include name="**/_Stubs.*" />
                <include name="**/_DBSchema.bin" />
                <include name="**/*.suo" />
                <include name="**/*.*proj.user" />
            </fileset>
        </delete>
    </target>

    <target name="vs2005_wizards" depends="clean_wizards">
        <delete dir="tmp_dir" failonerror="false" />
        <copy todir="tmp_dir">
            <fileset basedir="wizard/vs2005/work/cs-console/Soodawind">
                <include name="**/*" />
                <exclude name="**/bin/**" />
                <exclude name="**/obj/**" />
                <exclude name="**/Stubs/**" />
                <exclude name="**/*.suo" />
                <exclude name="**/*.sln" />
                <exclude name="**/*.*proj.user" />
                <exclude name="**/*.vstemplate" />
            </fileset>
            <filterchain>
                <replacestring from="Soodawind" to="$safeprojectname$" />
            </filterchain>
        </copy>
        <echo message="This is just a placeholder. Rebuild your project to generate stubs." file="tmp_dir/_DBSchema.bin" />
        <echo message="This is just a placeholder. Rebuild your project to generate stubs." file="tmp_dir/_Stubs.cs" />
        <copy todir="tmp_dir">
            <fileset basedir="wizard/vs2005/work/cs-console/Soodawind">
                <include name="**/*.vstemplate" />
            </fileset>
            <filterchain>                                             
                <replacestring from="&quot;Soodawind.soodaproject&quot;" to="&quot;$safeprojectname$.soodaproject&quot;" />
            </filterchain>
        </copy>
        <zip zipfile="CSSoodaConsoleProject.zip">
            <fileset basedir="tmp_dir">
                <include name="**/*" />
            </fileset>
        </zip>
    </target>

    <target name="source_snapshot">
        <delete dir="temp/source_snapshot" if="${directory::exists('temp/source_snapshot')}" />
        <property name="temp.dir" value="temp/source_snapshot/Sooda-${release.version}" />
        <mkdir dir="temp/source_snapshot" if="${not directory::exists('temp/source_snapshot')}" />
        <exec program="svn" commandline="export . ${temp.dir}" />
        <zip zipfile="Sooda-source-${release.version}.zip">
            <fileset basedir="temp/source_snapshot">
                <include name="**/*" />
                <exclude name="_svn" />
            </fileset>
        </zip>
    </target>

    <target name="binary_snapshot">
        <zip zipfile="Sooda-binary-${release.version}.zip">
            <fileset basedir="${sooda.dir}">
                <include name="**/*" />
                <exclude name="_svn" />
            </fileset>
        </zip>
    </target>

    <target name="sourceforge-release">
        <nant buildfile="${nant.project.buildfile}" target="debug clean build installer source_snapshot binary_snapshot" />
    </target>
</project>
