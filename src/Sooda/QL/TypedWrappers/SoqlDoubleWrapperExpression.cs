//
// Copyright (c) 2003-2006 Jaroslaw Kowalski <jaak@jkowalski.net>
// Copyright (c) 2006-2014 Piotr Fusik <piotr@fusik.info>
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
//

// automatically generated by makewrappers.pl - do not modify

using System;

namespace Sooda.QL.TypedWrappers
{
    public class SoqlDoubleWrapperExpression : SoqlTypedWrapperExpression
    {
        public SoqlDoubleWrapperExpression()
        {
        }

        public SoqlDoubleWrapperExpression(SoqlExpression innerExpression) : base(innerExpression) { }

        public static implicit operator SoqlDoubleWrapperExpression(Double v)
        {
            return new SoqlDoubleWrapperExpression(new SoqlLiteralExpression(v));
        }

        public static implicit operator SoqlDoubleWrapperExpression(SoqlParameterLiteralExpression v)
        {
            return new SoqlDoubleWrapperExpression(v);
        }

        public static SoqlBooleanExpression operator ==(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Equal); }
        public static SoqlBooleanExpression operator !=(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.NotEqual); }

        public SoqlBooleanExpression In(params SoqlDoubleWrapperExpression[] inExpressions)
        {
            SoqlExpressionCollection rhs = new SoqlExpressionCollection();
            foreach (SoqlDoubleWrapperExpression e in inExpressions)
            {
                rhs.Add(e);
            }
            return new SoqlBooleanInExpression(this, rhs);
        }

        public SoqlBooleanExpression In(params Double[] inExpressions)
        {
            SoqlExpressionCollection rhs = new SoqlExpressionCollection();
            foreach (Double e in inExpressions)
            {
                rhs.Add(new SoqlLiteralExpression(e));
            }
            return new SoqlBooleanInExpression(this, rhs);
        }

        public override bool Equals(object o) { return object.ReferenceEquals(this, o); }
        public override int GetHashCode() { return base.GetHashCode(); }
        public static SoqlBooleanExpression operator <=(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.LessOrEqual); }
        public static SoqlBooleanExpression operator >=(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.GreaterOrEqual); }
        public static SoqlBooleanExpression operator <(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Less); }
        public static SoqlBooleanExpression operator >(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new Sooda.QL.SoqlBooleanRelationalExpression(left, right, Sooda.QL.SoqlRelationalOperator.Greater); }
        public static SoqlDoubleWrapperExpression operator +(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new SoqlDoubleWrapperExpression(new Sooda.QL.SoqlBinaryExpression(left, right, Sooda.QL.SoqlBinaryOperator.Add)); }
        public static SoqlDoubleWrapperExpression operator -(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new SoqlDoubleWrapperExpression(new Sooda.QL.SoqlBinaryExpression(left, right, Sooda.QL.SoqlBinaryOperator.Sub)); }
        public static SoqlDoubleWrapperExpression operator *(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new SoqlDoubleWrapperExpression(new Sooda.QL.SoqlBinaryExpression(left, right, Sooda.QL.SoqlBinaryOperator.Mul)); }
        public static SoqlDoubleWrapperExpression operator /(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new SoqlDoubleWrapperExpression(new Sooda.QL.SoqlBinaryExpression(left, right, Sooda.QL.SoqlBinaryOperator.Div)); }
        public static SoqlDoubleWrapperExpression operator %(SoqlDoubleWrapperExpression left, SoqlDoubleWrapperExpression right) { return new SoqlDoubleWrapperExpression(new Sooda.QL.SoqlBinaryExpression(left, right, Sooda.QL.SoqlBinaryOperator.Mod)); }
    }

}
